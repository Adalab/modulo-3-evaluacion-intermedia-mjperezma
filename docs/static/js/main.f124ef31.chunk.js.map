{"version":3,"sources":["components/Pokemon.js","components/Pokelist.js","components/App.js","serviceWorker.js","index.js"],"names":["Pokemon","props","itemsTypes","items","types","map","type","index","className","key","isFavorite","src","url","alt","name","id","onClick","addFavorite","Pokelist","ListPokemon","list","item","favs","fav","App","state","Pokedex","PokedexData","bind","favId","console","log","pokemon","this","pokemonfavorito","findIndex","favPoke","setState","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"y3DA8BeA,MA3Bf,SAAiBC,GAKf,IAAMC,EAAaD,EAAME,MAAMC,MAAMC,KAAI,SAACC,EAAMC,GAC9C,OACE,wBAAIC,UAAU,wBAAwBC,IAAKF,GACxCD,MAIP,OACE,yBAAKE,UAAWP,EAAME,MAAMO,WAAa,yBAA2B,mBAClE,yBAAKC,IAAKV,EAAME,MAAMS,IAAKC,IAAKZ,EAAME,MAAMW,OAC5C,wBAAIN,UAAU,wBAAwBP,EAAME,MAAMW,MAClD,wBAAIN,UAAU,kBAAkBN,GAChC,4BAAQM,UAAU,MAAMF,KAAK,SAASS,GAAId,EAAME,MAAMY,GAAIC,QAhB9D,WACEf,EAAMgB,YAAYhB,EAAME,MAAMY,MAe5B,wBCNSG,MAXf,SAAkBjB,GAChB,IAAMkB,EAAclB,EAAMmB,KAAKf,KAAI,SAACgB,GAClC,OACE,wBAAIb,UAAU,GAAGC,IAAKY,EAAKN,IACzB,kBAAC,EAAD,CAASZ,MAAOkB,EAAMJ,YAAahB,EAAMgB,YAAaK,KAAMrB,EAAMsB,UAIxE,OAAO,wBAAIf,UAAU,aAAaW,I,OC2BrBK,E,kDAhCb,WAAYvB,GAAQ,IAAD,8BACjB,cAAMA,IACDwB,MAAQ,CACXC,QAASC,GAEX,EAAKV,YAAc,EAAKA,YAAYW,KAAjB,gBALF,E,wDAQPC,GACVC,QAAQC,IAAI,oBAAqBF,GACjC,IAAIG,EAAUC,KAAKR,MAAMC,QACnBQ,EAAkBD,KAAKR,MAAMC,QAAQS,WAAU,SAACC,GAAD,OAAaA,EAAQrB,KAAOc,MACrC,IAAxCG,EAAQE,GAAiBxB,WAC3BsB,EAAQE,GAAiBxB,YAAa,EAEtCsB,EAAQE,GAAiBxB,YAAa,EAExCuB,KAAKI,SAAS,CACZX,QAASM,M,+BAKX,OACE,0BAAMxB,UAAU,OACd,wBAAIA,UAAU,eAAd,uBACA,kBAAC,EAAD,CAAUY,KAAMa,KAAKR,MAAMC,QAAST,YAAagB,KAAKhB,mB,GA3B5CqB,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.f124ef31.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Pokemon(props) {\n  function handlBtn() {\n    props.addFavorite(props.items.id);\n  }\n\n  const itemsTypes = props.items.types.map((type, index) => {\n    return (\n      <li className='pokemon__types__items' key={index}>\n        {type}\n      </li>\n    );\n  });\n  return (\n    <div className={props.items.isFavorite ? 'pokelist__items addFav' : 'pokelist__items'}>\n      <img src={props.items.url} alt={props.items.name} />\n      <h4 className='pokemon__types__name'>{props.items.name}</h4>\n      <ul className='pokemon__types'>{itemsTypes}</ul>\n      <button className='btn' type='submit' id={props.items.id} onClick={handlBtn}>\n        Select as favorite\n      </button>\n    </div>\n  );\n}\nPokemon.propTypes = {\n  name: PropTypes.string,\n  type: PropTypes.string,\n};\nexport default Pokemon;\n","import React from 'react';\nimport Pokemon from './Pokemon';\n\nfunction Pokelist(props) {\n  const ListPokemon = props.list.map((item) => {\n    return (\n      <li className='' key={item.id}>\n        <Pokemon items={item} addFavorite={props.addFavorite} favs={props.fav} />\n      </li>\n    );\n  });\n  return <ul className='pokelist '>{ListPokemon}</ul>;\n}\n\nexport default Pokelist;\n","import React from 'react';\nimport '../style/App.css';\nimport Pokelist from './Pokelist';\nimport PokedexData from '../data/data.json';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      Pokedex: PokedexData,\n    };\n    this.addFavorite = this.addFavorite.bind(this);\n  }\n\n  addFavorite(favId) {\n    console.log('me clickan en app', favId);\n    let pokemon = this.state.Pokedex;\n    const pokemonfavorito = this.state.Pokedex.findIndex((favPoke) => favPoke.id === favId);\n    if (pokemon[pokemonfavorito].isFavorite === true) {\n      pokemon[pokemonfavorito].isFavorite = false;\n    } else {\n      pokemon[pokemonfavorito].isFavorite = true;\n    }\n    this.setState({\n      Pokedex: pokemon,\n    });\n  }\n\n  render() {\n    return (\n      <main className='App'>\n        <h1 className='main__title'>Mi lista de Pokemon</h1>\n        <Pokelist list={this.state.Pokedex} addFavorite={this.addFavorite} />\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport App from '../src/components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}